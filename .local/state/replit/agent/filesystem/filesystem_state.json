{"file_contents":{"app.py":{"content":"import os\nimport json\nimport logging\nfrom datetime import datetime\nfrom flask import Flask, render_template, request, jsonify, session, redirect, url_for\nfrom flask_cors import CORS\nfrom flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy.orm import DeclarativeBase\n\n# Configure logging\nlogging.basicConfig(level=logging.DEBUG)\n\nclass Base(DeclarativeBase):\n    pass\n\ndb = SQLAlchemy(model_class=Base)\n\napp = Flask(__name__)\napp.secret_key = os.environ.get(\"SESSION_SECRET\", \"enchanted_love_garden_secret_key_2025\")\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = os.environ.get(\"DATABASE_URL\")\napp.config[\"SQLALCHEMY_ENGINE_OPTIONS\"] = {\n    \"pool_recycle\": 300,\n    \"pool_pre_ping\": True,\n}\ndb.init_app(app)\nCORS(app)\n\n# Create tables\nwith app.app_context():\n    db.create_all()\n\n# Database Models\nclass Affirmation(db.Model):\n    __tablename__ = 'affirmations'\n    id = db.Column(db.Integer, primary_key=True)\n    text = db.Column(db.Text, nullable=False)\n    user_type = db.Column(db.String(50), nullable=False)\n    likes = db.Column(db.Integer, default=0)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\nclass DateIdea(db.Model):\n    __tablename__ = 'date_ideas'\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(200), nullable=False)\n    description = db.Column(db.Text, nullable=False)\n    category = db.Column(db.String(50), nullable=False, default='romantic')\n    user_type = db.Column(db.String(50), nullable=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\nclass DiaryEntry(db.Model):\n    __tablename__ = 'diary_entries'\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(200), nullable=False)\n    content = db.Column(db.Text, nullable=False)\n    mood = db.Column(db.String(50), nullable=False, default='happy')\n    user_type = db.Column(db.String(50), nullable=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\nclass KoalaStats(db.Model):\n    __tablename__ = 'koala_stats'\n    id = db.Column(db.Integer, primary_key=True)\n    happiness = db.Column(db.Integer, default=50)\n    hunger = db.Column(db.Integer, default=50)\n    energy = db.Column(db.Integer, default=50)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow)\n\nclass GameScore(db.Model):\n    __tablename__ = 'game_scores'\n    id = db.Column(db.Integer, primary_key=True)\n    game_type = db.Column(db.String(50), nullable=False)\n    score = db.Column(db.Integer, nullable=False)\n    time_taken = db.Column(db.Integer, default=0)\n    user_type = db.Column(db.String(50), nullable=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\n@app.route('/')\ndef index():\n    \"\"\"Main page\"\"\"\n    return render_template('index.html')\n\n@app.route('/auth', methods=['POST'])\ndef authenticate():\n    \"\"\"Authenticate user with passcode\"\"\"\n    passcode = request.form.get('passcode', '').strip()\n    if passcode == '1207':\n        session['authenticated'] = True\n        return jsonify({\"success\": True})\n    return jsonify({\"success\": False, \"error\": \"Invalid passcode\"})\n\n@app.route('/set_user', methods=['POST'])\ndef set_user():\n    \"\"\"Set user profile and theme\"\"\"\n    if not session.get('authenticated'):\n        return jsonify({\"error\": \"Not authenticated\"}), 401\n    \n    data = request.get_json()\n    user_type = data.get('user_type')  # 'keychain' or 'bug'\n    theme = data.get('theme', 'keychain')\n    \n    if user_type not in ['keychain', 'bug']:\n        return jsonify({\"error\": \"Invalid user type\"}), 400\n    \n    session['user_type'] = user_type\n    session['theme'] = theme\n    \n    return jsonify({\"success\": True})\n\n@app.route('/api/data/<section>', methods=['GET', 'POST'])\ndef handle_data(section):\n    \"\"\"Handle data for different sections\"\"\"\n    if not session.get('authenticated'):\n        return jsonify({\"error\": \"Not authenticated\"}), 401\n    \n    user_type = session.get('user_type', 'default')\n    \n    if request.method == 'GET':\n        if section == 'affirmations':\n            affirmations = Affirmation.query.filter_by(user_type=user_type).order_by(Affirmation.created_at.desc()).all()\n            return jsonify([{\n                'id': a.id, \n                'text': a.text, \n                'likes': a.likes, \n                'date': a.created_at.isoformat()\n            } for a in affirmations])\n        elif section == 'date_ideas':\n            ideas = DateIdea.query.filter_by(user_type=user_type).order_by(DateIdea.created_at.desc()).all()\n            return jsonify([{\n                'id': d.id, \n                'title': d.title, \n                'description': d.description, \n                'category': d.category, \n                'date': d.created_at.isoformat()\n            } for d in ideas])\n        elif section == 'diary_entries':\n            entries = DiaryEntry.query.filter_by(user_type=user_type).order_by(DiaryEntry.created_at.desc()).all()\n            return jsonify([{\n                'id': e.id, \n                'title': e.title, \n                'content': e.content, \n                'mood': e.mood, \n                'date': e.created_at.isoformat()\n            } for e in entries])\n        elif section == 'koala_stats':\n            stats = KoalaStats.query.first()\n            if not stats:\n                stats = KoalaStats()\n                db.session.add(stats)\n                db.session.commit()\n            return jsonify({\n                'happiness': stats.happiness,\n                'hunger': stats.hunger,\n                'energy': stats.energy\n            })\n        else:\n            return jsonify([])\n    \n    elif request.method == 'POST':\n        content = request.get_json()\n        \n        if section == 'affirmations':\n            affirmation = Affirmation(\n                text=content.get('text', ''),\n                user_type=user_type\n            )\n            db.session.add(affirmation)\n            db.session.commit()\n            return jsonify({\"success\": True, \"id\": affirmation.id})\n            \n        elif section == 'date_ideas':\n            idea = DateIdea(\n                title=content.get('title', ''),\n                description=content.get('description', ''),\n                category=content.get('category', 'romantic'),\n                user_type=user_type\n            )\n            db.session.add(idea)\n            db.session.commit()\n            return jsonify({\"success\": True, \"id\": idea.id})\n            \n        elif section == 'diary_entries':\n            entry = DiaryEntry(\n                title=content.get('title', ''),\n                content=content.get('content', ''),\n                mood=content.get('mood', 'happy'),\n                user_type=user_type\n            )\n            db.session.add(entry)\n            db.session.commit()\n            return jsonify({\"success\": True, \"id\": entry.id})\n            \n        elif section == 'koala_stats':\n            stats = KoalaStats.query.first()\n            if not stats:\n                stats = KoalaStats()\n                db.session.add(stats)\n            \n            stats.happiness = content.get('happiness', stats.happiness)\n            stats.hunger = content.get('hunger', stats.hunger)\n            stats.energy = content.get('energy', stats.energy)\n            stats.updated_at = datetime.utcnow()\n            db.session.commit()\n            return jsonify({\"success\": True})\n            \n        elif section == 'game_score':\n            game_type = content.get('game_type')\n            score = GameScore(\n                game_type=game_type,\n                score=content.get('score', 0),\n                time_taken=content.get('time', 0),\n                user_type=user_type\n            )\n            db.session.add(score)\n            db.session.commit()\n            return jsonify({\"success\": True})\n        \n        return jsonify({\"error\": \"Invalid section\"}), 400\n\n@app.route('/api/edit/<section>/<int:item_id>', methods=['PUT'])\ndef edit_item(section, item_id):\n    \"\"\"Edit an item in a section\"\"\"\n    if not session.get('authenticated'):\n        return jsonify({\"error\": \"Not authenticated\"}), 401\n    \n    content = request.get_json()\n    \n    if section == 'affirmations':\n        affirmation = Affirmation.query.get(item_id)\n        if not affirmation:\n            return jsonify({\"error\": \"Item not found\"}), 404\n        affirmation.text = content.get('text', affirmation.text)\n        db.session.commit()\n        return jsonify({\"success\": True})\n    elif section == 'date_ideas':\n        idea = DateIdea.query.get(item_id)\n        if not idea:\n            return jsonify({\"error\": \"Item not found\"}), 404\n        idea.title = content.get('title', idea.title)\n        idea.description = content.get('description', idea.description)\n        idea.category = content.get('category', idea.category)\n        db.session.commit()\n        return jsonify({\"success\": True})\n    elif section == 'diary_entries':\n        entry = DiaryEntry.query.get(item_id)\n        if not entry:\n            return jsonify({\"error\": \"Item not found\"}), 404\n        entry.title = content.get('title', entry.title)\n        entry.content = content.get('content', entry.content)\n        entry.mood = content.get('mood', entry.mood)\n        db.session.commit()\n        return jsonify({\"success\": True})\n    \n    return jsonify({\"error\": \"Invalid section\"}), 400\n\n@app.route('/api/delete/<section>/<int:item_id>', methods=['DELETE'])\ndef delete_item(section, item_id):\n    \"\"\"Delete an item from a section\"\"\"\n    if not session.get('authenticated'):\n        return jsonify({\"error\": \"Not authenticated\"}), 401\n    \n    if section == 'affirmations':\n        affirmation = Affirmation.query.get(item_id)\n        if not affirmation:\n            return jsonify({\"error\": \"Item not found\"}), 404\n        db.session.delete(affirmation)\n        db.session.commit()\n        return jsonify({\"success\": True})\n    elif section == 'date_ideas':\n        idea = DateIdea.query.get(item_id)\n        if not idea:\n            return jsonify({\"error\": \"Item not found\"}), 404\n        db.session.delete(idea)\n        db.session.commit()\n        return jsonify({\"success\": True})\n    elif section == 'diary_entries':\n        entry = DiaryEntry.query.get(item_id)\n        if not entry:\n            return jsonify({\"error\": \"Item not found\"}), 404\n        db.session.delete(entry)\n        db.session.commit()\n        return jsonify({\"success\": True})\n    \n    return jsonify({\"error\": \"Invalid section\"}), 400\n\n@app.route('/api/like/<section>/<int:item_id>', methods=['POST'])\ndef like_item(section, item_id):\n    \"\"\"Like an item in a section\"\"\"\n    if not session.get('authenticated'):\n        return jsonify({\"error\": \"Not authenticated\"}), 401\n    \n    if section == 'affirmations':\n        affirmation = Affirmation.query.get(item_id)\n        if affirmation:\n            affirmation.likes += 1\n            db.session.commit()\n            return jsonify({\"success\": True, \"likes\": affirmation.likes})\n    \n    return jsonify({\"error\": \"Item not found\"}), 404\n\n@app.route('/api/save-game-score', methods=['POST'])\ndef save_game_score():\n    \"\"\"Save game score\"\"\"\n    if not session.get('authenticated'):\n        return jsonify({\"error\": \"Not authenticated\"}), 401\n    \n    content = request.get_json()\n    user_type = session.get('user_type', 'default')\n    \n    score = GameScore(\n        game_type=content.get('game_type'),\n        score=content.get('score', 0),\n        time_taken=content.get('time_taken', 0),\n        user_type=user_type\n    )\n    db.session.add(score)\n    db.session.commit()\n    return jsonify({\"success\": True})\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n","size_bytes":11660},"main.py":{"content":"from app import app\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n","size_bytes":99},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"email-validator>=2.2.0\",\n    \"flask-cors>=6.0.1\",\n    \"flask>=3.1.1\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"gunicorn>=23.0.0\",\n    \"psycopg2-binary>=2.9.10\",\n]\n","size_bytes":305},"replit.md":{"content":"# Overview\n\nEnchanted Love Garden is a Flask-based web application that combines a romantic-themed virtual garden experience with interactive games and personal features. The application serves as a personalized digital companion offering affirmations, date ideas, diary functionality, virtual pet care (koala), and mini-games including Sudoku, Tic-tac-toe, and card matching. The project emphasizes a whimsical, love-themed aesthetic with customizable themes and animated user interfaces.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Static File Organization**: CSS, JavaScript, and HTML templates are organized in dedicated directories (`static/css/`, `static/js/`, `templates/`)\n- **Responsive Design**: Bootstrap 5.3.0 integration for mobile-friendly layouts with custom CSS overlays\n- **Animation System**: Custom JavaScript animation engine with flower intro sequences and theme-based visual effects\n- **Theme Management**: Dynamic theme switching system with CSS custom properties supporting multiple visual themes (default, keychain/bunny-matcha)\n- **Single Page Application (SPA)**: JavaScript-driven section navigation without page reloads using screen management system\n\n## Backend Architecture\n- **Flask Framework**: Lightweight Python web framework serving as the primary backend\n- **Session Management**: Flask sessions with configurable secret keys for user state persistence\n- **CORS Support**: Cross-origin resource sharing enabled for potential API consumption\n- **File-based Storage**: JSON file storage system (`data/storage.json`) for persistent data management\n- **Modular Structure**: Separation of concerns with dedicated modules for games, animations, and core application logic\n\n## Data Storage Design\n- **JSON-based Persistence**: Flat-file JSON storage avoiding database complexity while maintaining data structure\n- **Hierarchical Data Model**: User-specific data and global application data separated with nested structure\n- **Game State Management**: Dedicated storage sections for different game types and scoring systems\n- **Virtual Pet System**: Persistent koala stats (happiness, hunger, energy) with numerical state tracking\n\n## Authentication & Access Control\n- **Passcode-based Authentication**: Simple passcode system for application access without complex user registration\n- **Character Selection**: User persona system allowing character-based customization and preferences\n- **Session Persistence**: Server-side session management for maintaining user state across requests\n\n# External Dependencies\n\n## Frontend Libraries\n- **Bootstrap 5.3.0**: UI framework for responsive design and component styling\n- **Font Awesome 6.4.0**: Icon library for consistent iconography throughout the application\n- **Google Fonts (Comfortaa)**: Custom typography for enhanced visual appeal\n\n## Python Dependencies\n- **Flask**: Core web framework for routing and request handling\n- **Flask-CORS**: Cross-origin resource sharing middleware for API compatibility\n\n## Development Tools\n- **Python Logging**: Built-in logging system for debugging and error tracking\n- **Environment Variables**: Configuration management through environment variables for secrets\n\n## File System Dependencies\n- **Local JSON Storage**: Direct file system access for data persistence in `data/` directory\n- **Static Asset Serving**: Flask's built-in static file serving for CSS, JavaScript, and media assets","size_bytes":3494},"static/css/styles.css":{"content":"/* General Styles */\n@import url('https://fonts.googleapis.com/css2?family=Comfortaa:wght@300;400;600;700&display=swap');\n\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\n:root {\n    --dark-color: #000;\n    --primary-color: #6bf0ff;\n    --secondary-color: #a7ffee;\n    --accent-color: #54b8aa;\n    --light-color: #fff;\n    --text-color: #333;\n    --bg-color: #f8f9fa;\n}\n\nbody {\n    font-family: 'Comfortaa', cursive;\n    color: var(--text-color);\n    background: var(--bg-color);\n    transition: all 0.3s ease;\n}\n\n/* Hide main app initially */\n.main-app.d-none {\n    display: none !important;\n}\n\n/* Screen management */\n.screen {\n    display: none;\n}\n\n.screen.active {\n    display: block;\n}\n\n/* Animations */\n@keyframes fade-in {\n    from {\n        opacity: 0;\n        transform: translateY(20px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n.fade-in {\n    animation: fade-in 1.5s ease-out forwards;\n}\n\n@keyframes heart-beat {\n    0%, 100% {\n        transform: scale(1);\n    }\n    50% {\n        transform: scale(1.1);\n    }\n}\n\n.heart-beat {\n    animation: heart-beat 1.5s infinite;\n}\n\n@keyframes collected-heart {\n    0% {\n        transform: scale(1);\n        opacity: 1;\n    }\n    100% {\n        transform: scale(1.5) translateY(-50px);\n        opacity: 0;\n    }\n}\n\n.collected-heart {\n    animation: collected-heart 0.5s ease-out forwards;\n}\n\n@keyframes float {\n    0%, 100% {\n        transform: translateY(0px);\n    }\n    50% {\n        transform: translateY(-10px);\n    }\n}\n\n.floating {\n    animation: float 3s ease-in-out infinite;\n}\n\n/* Flower Animation Styles */\n.flower-animation-body {\n    display: flex;\n    align-items: flex-end;\n    justify-content: center;\n    min-height: 100vh;\n    background-color: var(--dark-color);\n    overflow: hidden;\n    perspective: 1000px;\n}\n\n.flower-intro-container {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    z-index: 9999;\n    background: var(--dark-color);\n}\n\n.night {\n    position: fixed;\n    left: 50%;\n    top: 0;\n    transform: translateX(-50%);\n    width: 100%;\n    height: 100%;\n    filter: blur(0.1vmin);\n    background-image: \n        radial-gradient(ellipse at top, transparent 0%, var(--dark-color)),\n        radial-gradient(ellipse at bottom, var(--dark-color), rgba(145, 233, 255, 0.2)),\n        repeating-linear-gradient(220deg, black 0px, black 19px, transparent 19px, transparent 22px),\n        repeating-linear-gradient(189deg, black 0px, black 19px, transparent 19px, transparent 22px),\n        repeating-linear-gradient(148deg, black 0px, black 19px, transparent 19px, transparent 22px),\n        linear-gradient(90deg, #2d1b69, #11072c, #2d1b69);\n}\n\n.flowers {\n    position: relative;\n    transform: scale(0.9);\n}\n\n.flower {\n    position: absolute;\n    bottom: 10vmin;\n    transform-origin: bottom center;\n    z-index: 10;\n    --fl-speed: 0.8s;\n}\n\n.flower--1 {\n    animation: moving-flower-1 4s linear infinite;\n}\n\n.flower--1 .flower__line {\n    height: 70vmin;\n    animation-delay: 0.3s;\n}\n\n.flower--1 .flower__line__leaf--1 {\n    animation: blooming-leaf-right var(--fl-speed) 1.6s backwards;\n}\n\n.flower--1 .flower__line__leaf--2 {\n    animation: blooming-leaf-right var(--fl-speed) 1.4s backwards;\n}\n\n.flower--1 .flower__line__leaf--3 {\n    animation: blooming-leaf-left var(--fl-speed) 1.2s backwards;\n}\n\n.flower--1 .flower__line__leaf--4 {\n    animation: blooming-leaf-left var(--fl-speed) 1s backwards;\n}\n\n.flower--1 .flower__line__leaf--5 {\n    animation: blooming-leaf-right var(--fl-speed) 1.8s backwards;\n}\n\n.flower--1 .flower__line__leaf--6 {\n    animation: blooming-leaf-left var(--fl-speed) 2s backwards;\n}\n\n.flower--2 {\n    left: 50%;\n    transform: rotate(20deg);\n    animation: moving-flower-2 4s linear infinite;\n}\n\n.flower--2 .flower__line {\n    height: 60vmin;\n    animation-delay: 0.6s;\n}\n\n.flower--2 .flower__line__leaf--1 {\n    animation: blooming-leaf-right var(--fl-speed) 1.9s backwards;\n}\n\n.flower--2 .flower__line__leaf--2 {\n    animation: blooming-leaf-right var(--fl-speed) 1.7s backwards;\n}\n\n.flower--2 .flower__line__leaf--3 {\n    animation: blooming-leaf-left var(--fl-speed) 1.5s backwards;\n}\n\n.flower--2 .flower__line__leaf--4 {\n    animation: blooming-leaf-left var(--fl-speed) 1.3s backwards;\n}\n\n.flower--3 {\n    left: 50%;\n    transform: rotate(-15deg);\n    animation: moving-flower-3 4s linear infinite;\n}\n\n.flower--3 .flower__line {\n    animation-delay: 0.9s;\n}\n\n.flower--3 .flower__line__leaf--1 {\n    animation: blooming-leaf-right var(--fl-speed) 2.5s backwards;\n}\n\n.flower--3 .flower__line__leaf--2 {\n    animation: blooming-leaf-right var(--fl-speed) 2.3s backwards;\n}\n\n.flower--3 .flower__line__leaf--3 {\n    animation: blooming-leaf-left var(--fl-speed) 2.1s backwards;\n}\n\n.flower--3 .flower__line__leaf--4 {\n    animation: blooming-leaf-left var(--fl-speed) 1.9s backwards;\n}\n\n.flower__leafs {\n    position: relative;\n    animation: blooming-flower 2s backwards;\n}\n\n.flower__leafs--1 {\n    animation-delay: 1.1s;\n}\n\n.flower__leafs--2 {\n    animation-delay: 1.4s;\n}\n\n.flower__leafs--3 {\n    animation-delay: 1.7s;\n}\n\n.flower__leafs::after {\n    content: \"\";\n    position: absolute;\n    left: 0;\n    top: 0;\n    transform: translate(-50%, -100%);\n    width: 8vmin;\n    height: 8vmin;\n    background-color: #6bf0ff;\n    filter: blur(10vmin);\n}\n\n.flower__leaf {\n    position: absolute;\n    bottom: 0;\n    left: 50%;\n    width: 8vmin;\n    height: 11vmin;\n    border-radius: 51% 49% 47% 53% / 44% 45% 55% 69%;\n    background-color: #a7ffee;\n    background-image: linear-gradient(to top, #54b8aa, #a7ffee);\n    transform-origin: bottom center;\n    opacity: 0.9;\n    box-shadow: inset 0 0 2vmin rgba(255, 255, 255, 0.5);\n}\n\n.flower__leaf--1 {\n    transform: translate(-10%, 1%) rotateY(40deg) rotateX(-50deg);\n}\n\n.flower__leaf--2 {\n    transform: translate(-50%, -4%) rotateX(40deg);\n}\n\n.flower__leaf--3 {\n    transform: translate(-90%, 0%) rotateY(45deg) rotateX(50deg);\n}\n\n.flower__leaf--4 {\n    width: 8vmin;\n    height: 8vmin;\n    transform-origin: bottom left;\n    border-radius: 4vmin 10vmin 4vmin 4vmin;\n    transform: translate(0%, 18%) rotateX(70deg) rotate(-43deg);\n    background-image: linear-gradient(to top, #39c6d6, #a7ffee);\n    z-index: 1;\n    opacity: 0.8;\n}\n\n.flower__white-circle {\n    position: absolute;\n    left: -3.5vmin;\n    top: -3vmin;\n    width: 9vmin;\n    height: 4vmin;\n    border-radius: 50%;\n    background-color: #fff;\n}\n\n.flower__white-circle::after {\n    content: \"\";\n    position: absolute;\n    left: 50%;\n    top: 45%;\n    transform: translate(-50%, -50%);\n    width: 60%;\n    height: 60%;\n    border-radius: inherit;\n    background-image: \n        repeating-linear-gradient(135deg, rgba(0, 0, 0, 0.03) 0px, rgba(0, 0, 0, 0.03) 1px, transparent 1px, transparent 12px),\n        repeating-linear-gradient(45deg, rgba(0, 0, 0, 0.03) 0px, rgba(0, 0, 0, 0.03) 1px, transparent 1px, transparent 12px),\n        linear-gradient(90deg, rgb(195, 199, 191), rgb(235, 235, 235));\n}\n\n.flower__line {\n    height: 55vmin;\n    width: 1.5vmin;\n    background-image: \n        linear-gradient(to left, rgba(0, 0, 0, 0.2), transparent, rgba(255, 255, 255, 0.2)),\n        linear-gradient(to top, transparent 10%, #14757a, #39c6d6);\n    box-shadow: inset 0 0 2px rgba(0, 0, 0, 0.5);\n    animation: grow-flower-tree 4s backwards;\n}\n\n.flower__line__leaf {\n    --w: 7vmin;\n    --h: calc(var(--w) + 2vmin);\n    position: absolute;\n    top: 20%;\n    left: 90%;\n    width: var(--w);\n    height: var(--h);\n    border-top-right-radius: var(--h);\n    border-bottom-left-radius: var(--h);\n    background-image: linear-gradient(to top, rgba(20, 117, 122, 0.4), #39c6d6);\n}\n\n.flower__line__leaf--1 {\n    transform: rotate(70deg) rotateY(30deg);\n}\n\n.flower__line__leaf--2 {\n    top: 45%;\n    transform: rotate(70deg) rotateY(30deg);\n}\n\n.flower__line__leaf--3,\n.flower__line__leaf--4,\n.flower__line__leaf--6 {\n    border-top-right-radius: 0;\n    border-bottom-left-radius: 0;\n    border-top-left-radius: var(--h);\n    border-bottom-right-radius: var(--h);\n    left: -460%;\n    top: 12%;\n    transform: rotate(-70deg) rotateY(30deg);\n}\n\n.flower__line__leaf--4 {\n    top: 40%;\n}\n\n.flower__line__leaf--5 {\n    top: 0;\n    transform-origin: left;\n    transform: rotate(70deg) rotateY(30deg) scale(0.6);\n}\n\n.flower__line__leaf--6 {\n    top: -2%;\n    left: -450%;\n    transform-origin: right;\n    transform: rotate(-70deg) rotateY(30deg) scale(0.6);\n}\n\n.flower__light {\n    position: absolute;\n    bottom: 0vmin;\n    width: 1vmin;\n    height: 1vmin;\n    background-color: #fffb00;\n    border-radius: 50%;\n    filter: blur(0.2vmin);\n    animation: light-ans 4s linear infinite backwards;\n}\n\n.flower__light:nth-child(odd) {\n    background-color: #23f0ff;\n}\n\n.flower__light--1 {\n    left: -2vmin;\n    animation-delay: 1s;\n}\n\n.flower__light--2 {\n    left: 3vmin;\n    animation-delay: 0.5s;\n}\n\n.flower__light--3 {\n    left: -6vmin;\n    animation-delay: 0.3s;\n}\n\n.flower__light--4 {\n    left: 6vmin;\n    animation-delay: 0.9s;\n}\n\n.flower__light--5 {\n    left: -1vmin;\n    animation-delay: 1.5s;\n}\n\n.flower__light--6 {\n    left: -4vmin;\n    animation-delay: 3s;\n}\n\n.flower__light--7 {\n    left: 3vmin;\n    animation-delay: 2s;\n}\n\n.flower__light--8 {\n    left: -6vmin;\n    animation-delay: 3.5s;\n}\n\n.flower__grass {\n    --c: #159faa;\n    --line-w: 1.5vmin;\n    position: absolute;\n    bottom: 12vmin;\n    left: -7vmin;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-end;\n    z-index: 20;\n    transform-origin: bottom center;\n    transform: rotate(-48deg) rotateY(40deg);\n}\n\n.flower__grass--1 {\n    animation: moving-grass 2s linear infinite;\n}\n\n.flower__grass--2 {\n    left: 2vmin;\n    bottom: 10vmin;\n    transform: scale(0.5) rotate(75deg) rotateX(10deg) rotateY(-200deg);\n    opacity: 0.8;\n    z-index: 0;\n    animation: moving-grass--2 1.5s linear infinite;\n}\n\n.flower__grass--top {\n    width: 7vmin;\n    height: 10vmin;\n    border-top-right-radius: 100%;\n    border-right: var(--line-w) solid var(--c);\n    transform-origin: bottom center;\n    transform: rotate(-2deg);\n}\n\n.flower__grass--bottom {\n    margin-top: -2px;\n    width: var(--line-w);\n    height: 25vmin;\n    background-image: linear-gradient(to top, transparent 30%, var(--c));\n}\n\n/* Flower Animation Keyframes */\n@keyframes moving-flower-1 {\n    0%, 100% {\n        transform: rotate(2deg);\n    }\n    50% {\n        transform: rotate(-2deg);\n    }\n}\n\n@keyframes moving-flower-2 {\n    0%, 100% {\n        transform: rotate(18deg);\n    }\n    50% {\n        transform: rotate(22deg);\n    }\n}\n\n@keyframes moving-flower-3 {\n    0%, 100% {\n        transform: rotate(-18deg);\n    }\n    50% {\n        transform: rotate(-12deg);\n    }\n}\n\n@keyframes blooming-leaf-right {\n    0% {\n        transform-origin: left;\n        transform: rotate(70deg) rotateY(30deg) scale(0);\n    }\n}\n\n@keyframes blooming-leaf-left {\n    0% {\n        transform-origin: right;\n        transform: rotate(-70deg) rotateY(30deg) scale(0);\n    }\n}\n\n@keyframes grow-flower-tree {\n    0% {\n        height: 0;\n    }\n}\n\n@keyframes blooming-flower {\n    0% {\n        transform: scale(0);\n    }\n}\n\n@keyframes moving-grass {\n    0%, 100% {\n        transform: rotate(-48deg) rotateY(40deg);\n    }\n    50% {\n        transform: rotate(-50deg) rotateY(40deg);\n    }\n}\n\n@keyframes moving-grass--2 {\n    0%, 100% {\n        transform: scale(0.5) rotate(75deg) rotateX(10deg) rotateY(-200deg);\n    }\n    50% {\n        transform: scale(0.5) rotate(73deg) rotateX(10deg) rotateY(-200deg);\n    }\n}\n\n@keyframes light-ans {\n    0% {\n        opacity: 0;\n        transform: translateY(0vmin);\n    }\n    25% {\n        opacity: 1;\n        transform: translateY(-5vmin);\n    }\n    50% {\n        opacity: 1;\n        transform: translateY(-15vmin);\n    }\n    75% {\n        opacity: 1;\n        transform: translateY(-25vmin);\n    }\n    100% {\n        opacity: 0;\n        transform: translateY(-35vmin);\n    }\n}\n\n/* Custom Components */\n.passcode-card {\n    background: rgba(255, 255, 255, 0.95);\n    backdrop-filter: blur(10px);\n    border: none;\n    border-radius: 20px;\n    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\n}\n\n.character-card {\n    border: none;\n    border-radius: 15px;\n    transition: all 0.3s ease;\n    cursor: pointer;\n    background: rgba(255, 255, 255, 0.9);\n    backdrop-filter: blur(10px);\n}\n\n.character-card:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);\n}\n\n.character-icon {\n    font-size: 4rem;\n    margin-bottom: 1rem;\n}\n\n.garden-navbar {\n    background: rgba(255, 255, 255, 0.95) !important;\n    backdrop-filter: blur(10px);\n    border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n}\n\n.content-area {\n    min-height: calc(100vh - 76px);\n    padding: 2rem 0;\n}\n\n.section-card {\n    background: rgba(255, 255, 255, 0.9);\n    border: none;\n    border-radius: 15px;\n    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);\n    transition: all 0.3s ease;\n}\n\n.section-card:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.12);\n}\n\n/* Game specific styles */\n.game-board {\n    display: grid;\n    gap: 5px;\n    margin: 20px auto;\n    max-width: 400px;\n}\n\n.sudoku-board {\n    grid-template-columns: repeat(9, 1fr);\n}\n\n.tictactoe-board {\n    grid-template-columns: repeat(3, 1fr);\n    max-width: 300px;\n}\n\n.cardmatch-board {\n    grid-template-columns: repeat(4, 1fr);\n    max-width: 320px;\n}\n\n.game-cell {\n    aspect-ratio: 1;\n    border: 2px solid #ddd;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 1.2rem;\n    font-weight: bold;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    background: white;\n}\n\n.game-cell:hover {\n    background: #f0f0f0;\n}\n\n.game-cell.selected {\n    background: #007bff;\n    color: white;\n}\n\n.heart-game-area {\n    position: relative;\n    height: 400px;\n    border: 2px dashed #ddd;\n    border-radius: 15px;\n    overflow: hidden;\n    background: linear-gradient(45deg, #f8f9fa, #e9ecef);\n}\n\n.heart {\n    position: absolute;\n    font-size: 2rem;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    user-select: none;\n}\n\n.heart:hover {\n    transform: scale(1.2);\n}\n\n/* Enhanced Responsive Design */\n@media (max-width: 768px) {\n    .character-icon {\n        font-size: 3rem;\n    }\n    \n    .content-area {\n        padding: 1rem;\n    }\n    \n    .game-board {\n        max-width: 280px;\n    }\n    \n    .game-cell {\n        font-size: 1rem;\n    }\n    \n    .section-card {\n        margin: 0 15px;\n        border-radius: 20px;\n    }\n    \n    .navbar-nav {\n        text-align: center;\n    }\n    \n    .passcode-card {\n        margin: 0 15px;\n        border-radius: 20px;\n    }\n    \n    .btn {\n        font-size: 0.9rem;\n        padding: 10px 20px;\n    }\n}\n\n@media (max-width: 576px) {\n    .container {\n        padding: 0 10px;\n    }\n    \n    .section-card {\n        margin: 0 10px;\n        padding: 1.5rem !important;\n    }\n    \n    .character-card {\n        margin: 0 10px;\n    }\n    \n    .btn {\n        font-size: 0.85rem;\n        padding: 8px 16px;\n    }\n    \n    h1, h2, h3 {\n        font-size: 1.5rem;\n    }\n    \n    .display-4 {\n        font-size: 2rem;\n    }\n}\n\n@media (min-width: 1200px) {\n    .section-card {\n        max-width: 900px;\n        margin: 0 auto;\n    }\n}\n\n/* Improved form styling */\n.form-control {\n    border-radius: 15px;\n    padding: 12px 16px;\n    border: 2px solid #e0e0e0;\n    transition: all 0.3s ease;\n}\n\n.form-control:focus {\n    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n    border-color: #007bff;\n    transform: translateY(-2px);\n}\n\n/* Enhanced card styling */\n.card {\n    border: none;\n    border-radius: 20px;\n    overflow: hidden;\n    transition: all 0.3s ease;\n}\n\n.card:hover {\n    transform: translateY(-5px);\n}\n\n/* Loading states */\n.loading {\n    opacity: 0.6;\n    pointer-events: none;\n}\n\n.spinner-border-sm {\n    width: 1rem;\n    height: 1rem;\n}\n\n/* Success/Error states */\n.success-message {\n    color: #28a745;\n}\n\n.error-message {\n    color: #dc3545;\n}\n","size_bytes":15951},"static/css/themes.css":{"content":"/* Theme Variables and Styling */\n\n/* Keychain Theme - Bunny/Matcha */\n[data-theme=\"keychain\"] {\n    --primary-color: #ff9ebc;\n    --secondary-color: #b8e6b8;\n    --accent-color: #ffd1dc;\n    --bg-color: #fff8f8;\n    --text-color: #d4518c;\n    --card-bg: rgba(255, 245, 248, 0.95);\n    --navbar-bg: rgba(255, 182, 193, 0.98);\n    --shadow-color: rgba(255, 158, 188, 0.3);\n}\n\n[data-theme=\"keychain\"] body {\n    background: radial-gradient(circle at 20% 20%, #ffe4e1 0%, transparent 50%),\n                radial-gradient(circle at 80% 80%, #f0fff0 0%, transparent 50%),\n                radial-gradient(circle at 40% 60%, #fff8dc 0%, transparent 50%),\n    linear-gradient(135deg, #fff5f5 0%, #f8fff8 50%, #fffacd 100%);\n    min-height: 100vh;\n    position: relative;\n}\n\n[data-theme=\"keychain\"] .garden-navbar {\n    background: var(--navbar-bg) !important;\n}\n\n[data-theme=\"keychain\"] .navbar-brand {\n    color: var(--text-color) !important;\n}\n\n[data-theme=\"keychain\"] .nav-link {\n    color: var(--text-color) !important;\n}\n\n[data-theme=\"keychain\"] .nav-link:hover {\n    color: var(--primary-color) !important;\n    transform: translateY(-2px);\n}\n\n[data-theme=\"keychain\"] .section-card {\n    background: var(--card-bg);\n    border: 3px solid var(--primary-color);\n    border-radius: 25px;\n    box-shadow: 0 10px 30px var(--shadow-color);\n    backdrop-filter: blur(10px);\n}\n\n[data-theme=\"keychain\"] .btn-primary {\n    background: linear-gradient(45deg, var(--primary-color), var(--accent-color));\n    border: none;\n    color: white;\n    border-radius: 20px;\n    padding: 12px 25px;\n    font-weight: 600;\n    text-shadow: 0 1px 2px rgba(0,0,0,0.1);\n    box-shadow: 0 5px 15px var(--shadow-color);\n}\n\n[data-theme=\"keychain\"] .btn-primary:hover {\n    background: linear-gradient(45deg, var(--secondary-color), var(--primary-color));\n    transform: translateY(-3px) scale(1.05);\n    box-shadow: 0 8px 25px var(--shadow-color);\n}\n\n[data-theme=\"keychain\"] .floating-particles::before {\n    content: '🌸';\n    position: absolute;\n    animation: float-particle 6s ease-in-out infinite;\n}\n\n/* Bug Theme - Koala/Forest */\n[data-theme=\"bug\"] {\n    --primary-color: #4caf50;\n    --secondary-color: #81c784;\n    --accent-color: #ffb74d;\n    --bg-color: #f1f8e9;\n    --text-color: #2e7d32;\n    --card-bg: rgba(240, 248, 240, 0.95);\n    --navbar-bg: rgba(129, 199, 132, 0.98);\n    --shadow-color: rgba(76, 175, 80, 0.3);\n}\n\n[data-theme=\"bug\"] body {\n    background: radial-gradient(circle at 30% 30%, #e8f5e8 0%, transparent 50%),\n                radial-gradient(circle at 70% 70%, #fff3e0 0%, transparent 50%),\n                radial-gradient(circle at 50% 20%, #f3e5f5 0%, transparent 50%),\n    linear-gradient(135deg, #f1f8e9 0%, #e8f5e8 50%, #fff8e1 100%);\n    min-height: 100vh;\n    position: relative;\n}\n\n[data-theme=\"bug\"] .garden-navbar {\n    background: var(--navbar-bg) !important;\n}\n\n[data-theme=\"bug\"] .navbar-brand {\n    color: var(--text-color) !important;\n}\n\n[data-theme=\"bug\"] .nav-link {\n    color: var(--text-color) !important;\n}\n\n[data-theme=\"bug\"] .nav-link:hover {\n    color: var(--primary-color) !important;\n    transform: translateY(-2px);\n}\n\n[data-theme=\"bug\"] .section-card {\n    background: var(--card-bg);\n    border: 3px solid var(--primary-color);\n    border-radius: 25px;\n    box-shadow: 0 10px 30px var(--shadow-color);\n    backdrop-filter: blur(10px);\n}\n\n[data-theme=\"bug\"] .btn-primary {\n    background: linear-gradient(45deg, var(--primary-color), var(--accent-color));\n    border: none;\n    color: white;\n    border-radius: 20px;\n    padding: 12px 25px;\n    font-weight: 600;\n    text-shadow: 0 1px 2px rgba(0,0,0,0.1);\n    box-shadow: 0 5px 15px var(--shadow-color);\n}\n\n[data-theme=\"bug\"] .btn-primary:hover {\n    background: linear-gradient(45deg, var(--secondary-color), var(--primary-color));\n    transform: translateY(-3px) scale(1.05);\n    box-shadow: 0 8px 25px var(--shadow-color);\n}\n\n[data-theme=\"bug\"] .floating-particles::before {\n    content: '🍃';\n    position: absolute;\n    animation: float-particle 5s ease-in-out infinite;\n}\n\n/* Firefly animation for bug theme */\n[data-theme=\"bug\"] .firefly {\n    position: fixed;\n    width: 4px;\n    height: 4px;\n    background: #daa520;\n    border-radius: 50%;\n    box-shadow: 0 0 10px #daa520;\n    animation: firefly-dance 8s ease-in-out infinite;\n    z-index: 1;\n}\n\n@keyframes firefly-dance {\n    0%, 100% {\n        transform: translate(0, 0);\n        opacity: 0.8;\n    }\n    25% {\n        transform: translate(100px, -50px);\n        opacity: 1;\n    }\n    50% {\n        transform: translate(-50px, -100px);\n        opacity: 0.6;\n    }\n    75% {\n        transform: translate(-100px, 50px);\n        opacity: 1;\n    }\n}\n\n/* Dark Theme - Magical Forest */\n[data-theme=\"dark\"] {\n    --primary-color: #ba68c8;\n    --secondary-color: #9c27b0;\n    --accent-color: #e91e63;\n    --bg-color: #1a1a2e;\n    --text-color: #e6e6fa;\n    --card-bg: rgba(26, 26, 46, 0.95);\n    --navbar-bg: rgba(186, 104, 200, 0.98);\n    --shadow-color: rgba(186, 104, 200, 0.4);\n}\n\n[data-theme=\"dark\"] body {\n    background: radial-gradient(circle at 20% 20%, #2d1b69 0%, transparent 50%),\n                radial-gradient(circle at 80% 80%, #4a148c 0%, transparent 50%),\n                radial-gradient(circle at 40% 60%, #ad1457 0%, transparent 50%),\n    linear-gradient(135deg, #0f0f23 0%, #1a1a2e 50%, #16213e 100%);\n    min-height: 100vh;\n    position: relative;\n    color: var(--text-color);\n}\n\n[data-theme=\"dark\"] .garden-navbar {\n    background: var(--navbar-bg) !important;\n}\n\n[data-theme=\"dark\"] .navbar-brand {\n    color: var(--text-color) !important;\n}\n\n[data-theme=\"dark\"] .nav-link {\n    color: var(--text-color) !important;\n}\n\n[data-theme=\"dark\"] .nav-link:hover {\n    color: var(--accent-color) !important;\n    transform: translateY(-2px);\n    text-shadow: 0 0 10px var(--accent-color);\n}\n\n[data-theme=\"dark\"] .section-card {\n    background: var(--card-bg);\n    border: 3px solid var(--primary-color);\n    border-radius: 25px;\n    box-shadow: 0 10px 30px var(--shadow-color), 0 0 20px rgba(186, 104, 200, 0.2);\n    backdrop-filter: blur(10px);\n    color: var(--text-color);\n}\n\n[data-theme=\"dark\"] .btn-primary {\n    background: linear-gradient(45deg, var(--primary-color), var(--accent-color));\n    border: none;\n    color: white;\n    border-radius: 20px;\n    padding: 12px 25px;\n    font-weight: 600;\n    text-shadow: 0 1px 2px rgba(0,0,0,0.3);\n    box-shadow: 0 5px 15px var(--shadow-color);\n}\n\n[data-theme=\"dark\"] .btn-primary:hover {\n    background: linear-gradient(45deg, var(--accent-color), var(--secondary-color));\n    transform: translateY(-3px) scale(1.05);\n    box-shadow: 0 8px 25px var(--shadow-color), 0 0 20px var(--accent-color);\n}\n\n[data-theme=\"dark\"] .floating-particles::before {\n    content: '✨';\n    position: absolute;\n    animation: float-particle 4s ease-in-out infinite;\n}\n\n/* Magical stars for dark theme */\n[data-theme=\"dark\"] .magic-star {\n    position: fixed;\n    color: var(--accent-color);\n    font-size: 1rem;\n    animation: twinkle 3s ease-in-out infinite;\n    z-index: 1;\n}\n\n@keyframes twinkle {\n    0%, 100% {\n        opacity: 0.3;\n        transform: scale(0.8);\n    }\n    50% {\n        opacity: 1;\n        transform: scale(1.2);\n    }\n}\n\n/* Particle animations */\n@keyframes float-particle {\n    0%, 100% {\n        transform: translateY(0px) rotate(0deg);\n        opacity: 0.7;\n    }\n    50% {\n        transform: translateY(-20px) rotate(180deg);\n        opacity: 1;\n    }\n}\n\n/* Theme transition effects */\nbody {\n    transition: all 0.5s ease;\n}\n\n.theme-transition {\n    transition: all 0.3s ease;\n}\n\n/* Form styling per theme */\n[data-theme=\"keychain\"] .form-control {\n    border-color: var(--primary-color);\n    background: rgba(255, 255, 255, 0.9);\n}\n\n[data-theme=\"keychain\"] .form-control:focus {\n    border-color: var(--secondary-color);\n    box-shadow: 0 0 10px rgba(255, 182, 193, 0.5);\n}\n\n[data-theme=\"bug\"] .form-control {\n    border-color: var(--primary-color);\n    background: rgba(255, 255, 255, 0.9);\n}\n\n[data-theme=\"bug\"] .form-control:focus {\n    border-color: var(--secondary-color);\n    box-shadow: 0 0 10px rgba(34, 139, 34, 0.5);\n}\n\n[data-theme=\"dark\"] .form-control {\n    border-color: var(--primary-color);\n    background: rgba(25, 25, 112, 0.6);\n    color: var(--text-color);\n}\n\n[data-theme=\"dark\"] .form-control:focus {\n    border-color: var(--accent-color);\n    box-shadow: 0 0 10px rgba(255, 105, 180, 0.5);\n    background: rgba(25, 25, 112, 0.8);\n}\n\n[data-theme=\"dark\"] .form-control::placeholder {\n    color: rgba(230, 230, 250, 0.7);\n}\n\n/* Game styling per theme */\n[data-theme=\"keychain\"] .game-cell {\n    border-color: var(--primary-color);\n    background: rgba(255, 255, 255, 0.9);\n}\n\n[data-theme=\"keychain\"] .game-cell:hover {\n    background: var(--secondary-color);\n}\n\n[data-theme=\"bug\"] .game-cell {\n    border-color: var(--primary-color);\n    background: rgba(255, 255, 255, 0.9);\n}\n\n[data-theme=\"bug\"] .game-cell:hover {\n    background: var(--secondary-color);\n}\n\n[data-theme=\"dark\"] .game-cell {\n    border-color: var(--primary-color);\n    background: var(--card-bg);\n    color: var(--text-color);\n}\n\n[data-theme=\"dark\"] .game-cell:hover {\n    background: var(--primary-color);\n}\n\n/* Heart game styling */\n[data-theme=\"keychain\"] .heart-game-area {\n    background: linear-gradient(45deg, #fff5f5, #f0fff0);\n    border-color: var(--primary-color);\n}\n\n[data-theme=\"bug\"] .heart-game-area {\n    background: linear-gradient(45deg, #f0f8f0, #e6f3e6);\n    border-color: var(--primary-color);\n}\n\n[data-theme=\"dark\"] .heart-game-area {\n    background: linear-gradient(45deg, var(--card-bg), rgba(72, 61, 139, 0.6));\n    border-color: var(--primary-color);\n}\n\n/* Modal and dropdown theming */\n[data-theme=\"dark\"] .dropdown-menu {\n    background: var(--card-bg);\n    border-color: var(--primary-color);\n}\n\n[data-theme=\"dark\"] .dropdown-item {\n    color: var(--text-color);\n}\n\n[data-theme=\"dark\"] .dropdown-item:hover {\n    background: var(--primary-color);\n    color: white;\n}\n\n[data-theme=\"dark\"] .toast {\n    background: var(--card-bg);\n    color: var(--text-color);\n    border-color: var(--primary-color);\n}\n\n/* Responsive theme adjustments */\n@media (max-width: 768px) {\n    [data-theme] .floating-particles::before {\n        font-size: 1.5rem;\n    }\n    \n    [data-theme=\"dark\"] .magic-star {\n        font-size: 0.8rem;\n    }\n}\n","size_bytes":10353},"static/js/animations.js":{"content":"class AnimationSystem {\n    constructor() {\n        this.isFlowerIntroComplete = false;\n        this.theme = 'default';\n        this.particles = [];\n        this.init();\n    }\n\n    init() {\n        this.startFlowerIntro();\n    }\n\n    startFlowerIntro() {\n        // Start the flower animation sequence\n        console.log('Starting flower intro animation...');\n        \n        // Set a timer to complete the intro after animation\n        setTimeout(() => {\n            this.completeFlowerIntro();\n        }, 6000); // 6 seconds for full flower animation\n    }\n\n    completeFlowerIntro() {\n        console.log('Completing flower intro...');\n        \n        const flowerIntro = document.getElementById('flower-intro');\n        const mainApp = document.getElementById('main-app');\n        const body = document.body;\n        \n        if (flowerIntro && mainApp) {\n            // Fade out flower intro\n            flowerIntro.style.transition = 'opacity 1s ease-out';\n            flowerIntro.style.opacity = '0';\n            \n            setTimeout(() => {\n                // Hide flower intro and show main app\n                flowerIntro.style.display = 'none';\n                body.classList.remove('flower-animation-body');\n                mainApp.classList.remove('d-none');\n                \n                // Add fade in effect to main app\n                mainApp.style.opacity = '0';\n                mainApp.style.transition = 'opacity 1s ease-in';\n                \n                setTimeout(() => {\n                    mainApp.style.opacity = '1';\n                }, 100);\n                \n                this.isFlowerIntroComplete = true;\n                \n                // Start theme particles\n                this.startThemeParticles();\n                \n            }, 1000);\n        }\n    }\n\n    setTheme(theme) {\n        this.theme = theme;\n        document.body.setAttribute('data-theme', theme);\n        \n        // Clear existing particles\n        this.clearParticles();\n        \n        // Start new theme particles\n        if (this.isFlowerIntroComplete) {\n            this.startThemeParticles();\n        }\n        \n        // Add theme transition effect\n        document.body.classList.add('theme-transition');\n        setTimeout(() => {\n            document.body.classList.remove('theme-transition');\n        }, 500);\n    }\n\n    startThemeParticles() {\n        // Clear existing particles first\n        this.clearParticles();\n        \n        switch(this.theme) {\n            case 'keychain':\n                this.createFloatingFlowers();\n                break;\n            case 'bug':\n                this.createFireflies();\n                break;\n            case 'dark':\n                this.createMagicStars();\n                break;\n        }\n    }\n\n    createFloatingFlowers() {\n        const flowers = ['🌸', '🌺', '🌼', '🌻', '🌷'];\n        \n        for (let i = 0; i < 6; i++) {\n            setTimeout(() => {\n                const flower = document.createElement('div');\n                flower.textContent = flowers[Math.floor(Math.random() * flowers.length)];\n                flower.className = 'floating-particles';\n                flower.style.cssText = `\n                    position: fixed;\n                    font-size: 2rem;\n                    pointer-events: none;\n                    z-index: 1;\n                    opacity: 0.7;\n                    left: ${Math.random() * 100}vw;\n                    top: ${Math.random() * 100}vh;\n                    animation: float-particle 8s ease-in-out infinite;\n                    animation-delay: ${Math.random() * 2}s;\n                `;\n                \n                document.body.appendChild(flower);\n                this.particles.push(flower);\n                \n                // Remove after animation cycle\n                setTimeout(() => {\n                    if (flower.parentNode) {\n                        flower.parentNode.removeChild(flower);\n                    }\n                }, 8000);\n            }, i * 500);\n        }\n    }\n\n    createFireflies() {\n        for (let i = 0; i < 8; i++) {\n            setTimeout(() => {\n                const firefly = document.createElement('div');\n                firefly.className = 'firefly';\n                firefly.style.cssText = `\n                    left: ${Math.random() * 100}vw;\n                    top: ${Math.random() * 100}vh;\n                    animation-delay: ${Math.random() * 4}s;\n                `;\n                \n                document.body.appendChild(firefly);\n                this.particles.push(firefly);\n                \n                // Remove after animation cycle\n                setTimeout(() => {\n                    if (firefly.parentNode) {\n                        firefly.parentNode.removeChild(firefly);\n                    }\n                }, 8000);\n            }, i * 300);\n        }\n    }\n\n    createMagicStars() {\n        const stars = ['✨', '⭐', '🌟', '💫', '🔮'];\n        \n        for (let i = 0; i < 10; i++) {\n            setTimeout(() => {\n                const star = document.createElement('div');\n                star.textContent = stars[Math.floor(Math.random() * stars.length)];\n                star.className = 'magic-star';\n                star.style.cssText = `\n                    left: ${Math.random() * 100}vw;\n                    top: ${Math.random() * 100}vh;\n                    animation-delay: ${Math.random() * 3}s;\n                    pointer-events: none;\n                `;\n                \n                document.body.appendChild(star);\n                this.particles.push(star);\n                \n                // Remove after animation cycle\n                setTimeout(() => {\n                    if (star.parentNode) {\n                        star.parentNode.removeChild(star);\n                    }\n                }, 6000);\n            }, i * 200);\n        }\n    }\n\n    clearParticles() {\n        this.particles.forEach(particle => {\n            if (particle.parentNode) {\n                particle.parentNode.removeChild(particle);\n            }\n        });\n        this.particles = [];\n        \n        // Clear any remaining particles\n        const existingParticles = document.querySelectorAll('.floating-particles, .firefly, .magic-star');\n        existingParticles.forEach(particle => {\n            if (particle.parentNode) {\n                particle.parentNode.removeChild(particle);\n            }\n        });\n    }\n\n    // Heart collection animation\n    animateHeartCollection(heartElement) {\n        heartElement.classList.add('collected-heart');\n        \n        setTimeout(() => {\n            if (heartElement.parentNode) {\n                heartElement.parentNode.removeChild(heartElement);\n            }\n        }, 500);\n    }\n\n    // Button hover effects\n    addButtonHoverEffects() {\n        const buttons = document.querySelectorAll('.btn');\n        \n        buttons.forEach(button => {\n            button.addEventListener('mouseenter', () => {\n                button.style.transform = 'translateY(-2px)';\n            });\n            \n            button.addEventListener('mouseleave', () => {\n                button.style.transform = 'translateY(0)';\n            });\n        });\n    }\n\n    // Card hover effects\n    addCardHoverEffects() {\n        const cards = document.querySelectorAll('.section-card, .character-card');\n        \n        cards.forEach(card => {\n            card.addEventListener('mouseenter', () => {\n                card.style.transform = 'translateY(-5px)';\n            });\n            \n            card.addEventListener('mouseleave', () => {\n                card.style.transform = 'translateY(0)';\n            });\n        });\n    }\n\n    // Fade in animation for content\n    fadeInContent(element) {\n        element.style.opacity = '0';\n        element.style.transform = 'translateY(20px)';\n        element.style.transition = 'opacity 0.5s ease, transform 0.5s ease';\n        \n        setTimeout(() => {\n            element.style.opacity = '1';\n            element.style.transform = 'translateY(0)';\n        }, 100);\n    }\n\n    // Refresh particle animations\n    refreshParticles() {\n        if (this.isFlowerIntroComplete) {\n            this.startThemeParticles();\n        }\n    }\n}\n\n// Initialize animation system\nconst animationSystem = new AnimationSystem();\n\n// Export for global use\nwindow.animationSystem = animationSystem;\n","size_bytes":8412},"static/js/app.js":{"content":"class EnchantedLoveGardenApp {\n    constructor() {\n        this.currentUser = null;\n        this.currentTheme = 'keychain';\n        this.currentSection = 'affirmations';\n        this.authenticated = false;\n        this.data = {};\n        \n        this.init();\n    }\n\n    init() {\n        console.log('Initializing Enchanted Love Garden App...');\n        this.setupEventListeners();\n        this.checkAuthenticationStatus();\n    }\n\n    setupEventListeners() {\n        // Passcode form\n        const passcodeForm = document.getElementById('passcode-form');\n        if (passcodeForm) {\n            passcodeForm.addEventListener('submit', (e) => this.handlePasscodeSubmit(e));\n        }\n\n        // Character selection\n        document.addEventListener('click', (e) => {\n            if (e.target.matches('.select-character')) {\n                this.selectCharacter(e.target.dataset.character);\n            }\n        });\n\n        // Navigation\n        document.addEventListener('click', (e) => {\n            if (e.target.matches('[data-section]') || e.target.closest('[data-section]')) {\n                e.preventDefault();\n                const sectionElement = e.target.matches('[data-section]') ? e.target : e.target.closest('[data-section]');\n                this.showSection(sectionElement.dataset.section);\n            }\n        });\n\n        // Theme switching\n        document.addEventListener('click', (e) => {\n            if (e.target.matches('.theme-switch')) {\n                e.preventDefault();\n                this.switchTheme(e.target.dataset.theme);\n            }\n        });\n\n        // Dynamic form submissions\n        document.addEventListener('submit', (e) => {\n            if (e.target.matches('.section-form')) {\n                e.preventDefault();\n                this.handleSectionForm(e.target);\n            }\n        });\n\n        // Like buttons\n        document.addEventListener('click', (e) => {\n            if (e.target.matches('.like-btn') || e.target.closest('.like-btn')) {\n                e.preventDefault();\n                const btn = e.target.matches('.like-btn') ? e.target : e.target.closest('.like-btn');\n                this.likeItem(btn.dataset.section, btn.dataset.id);\n            }\n        });\n\n        // Edit buttons\n        document.addEventListener('click', (e) => {\n            if (e.target.matches('.edit-btn') || e.target.closest('.edit-btn')) {\n                e.preventDefault();\n                const btn = e.target.matches('.edit-btn') ? e.target : e.target.closest('.edit-btn');\n                this.editItem(btn.dataset.section, btn.dataset.id);\n            }\n        });\n\n        // Delete buttons\n        document.addEventListener('click', (e) => {\n            if (e.target.matches('.delete-btn') || e.target.closest('.delete-btn')) {\n                e.preventDefault();\n                const btn = e.target.matches('.delete-btn') ? e.target : e.target.closest('.delete-btn');\n                this.deleteItem(btn.dataset.section, btn.dataset.id);\n            }\n        });\n    }\n\n    async handlePasscodeSubmit(e) {\n        e.preventDefault();\n        \n        const passcode = document.getElementById('passcode-input').value;\n        const errorDiv = document.getElementById('passcode-error');\n        \n        try {\n            const formData = new FormData();\n            formData.append('passcode', passcode);\n            \n            const response = await fetch('/auth', {\n                method: 'POST',\n                body: formData\n            });\n            \n            const data = await response.json();\n            \n            if (data.success) {\n                this.authenticated = true;\n                this.showUserSelection();\n            } else {\n                errorDiv.textContent = 'Invalid passcode. Please try again.';\n                errorDiv.classList.remove('d-none');\n            }\n        } catch (error) {\n            console.error('Authentication error:', error);\n            errorDiv.textContent = 'An error occurred. Please try again.';\n            errorDiv.classList.remove('d-none');\n        }\n    }\n\n    showUserSelection() {\n        this.showScreen('user-selection-screen');\n    }\n\n    async selectCharacter(character) {\n        try {\n            const response = await fetch('/set_user', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    user_type: character,\n                    theme: character\n                })\n            });\n            \n            if (response.ok) {\n                this.currentUser = character;\n                this.currentTheme = character;\n                this.switchTheme(character);\n                this.showGarden();\n            }\n        } catch (error) {\n            console.error('Error setting user:', error);\n            this.showNotification('Error setting user profile', 'error');\n        }\n    }\n\n    showGarden() {\n        this.showScreen('garden-screen');\n        this.showSection('affirmations');\n    }\n\n    showScreen(screenId) {\n        const screens = document.querySelectorAll('.screen');\n        screens.forEach(screen => screen.classList.remove('active'));\n        \n        const targetScreen = document.getElementById(screenId);\n        if (targetScreen) {\n            targetScreen.classList.add('active');\n        }\n    }\n\n    switchTheme(theme) {\n        this.currentTheme = theme;\n        \n        // Update theme via animation system\n        if (window.animationSystem) {\n            window.animationSystem.setTheme(theme);\n        }\n        \n        // Update navbar title based on theme\n        const title = document.getElementById('garden-title');\n        if (title) {\n            const icons = {\n                keychain: '🐰',\n                bug: '🐨',\n                dark: '🌙'\n            };\n            title.innerHTML = `<i class=\"fas fa-seedling\"></i> ${icons[theme]} Enchanted Love Garden`;\n        }\n        \n        this.showNotification(`Switched to ${theme} theme`, 'success');\n    }\n\n    async showSection(sectionName) {\n        this.currentSection = sectionName;\n        \n        // Update navigation\n        const navLinks = document.querySelectorAll('.nav-link');\n        navLinks.forEach(link => link.classList.remove('active'));\n        \n        const activeLink = document.querySelector(`[data-section=\"${sectionName}\"]`);\n        if (activeLink) {\n            activeLink.classList.add('active');\n        }\n        \n        // Load section content\n        const contentArea = document.getElementById('content-area');\n        if (contentArea) {\n            contentArea.innerHTML = '<div class=\"text-center\"><div class=\"spinner-border\" role=\"status\"></div></div>';\n            \n            try {\n                const content = await this.loadSectionContent(sectionName);\n                contentArea.innerHTML = '';\n                contentArea.appendChild(content);\n                \n                // Add fade in animation\n                if (window.animationSystem) {\n                    window.animationSystem.fadeInContent(content);\n                }\n            } catch (error) {\n                console.error('Error loading section:', error);\n                contentArea.innerHTML = '<div class=\"alert alert-danger\">Error loading section</div>';\n            }\n        }\n    }\n\n    async loadSectionContent(sectionName) {\n        switch (sectionName) {\n            case 'affirmations':\n                return await this.createAffirmationsSection();\n            case 'date-ideas':\n                return await this.createDateIdeasSection();\n            case 'diary':\n                return await this.createDiarySection();\n            case 'heart-game':\n                return this.createHeartGameSection();\n            case 'koala':\n                return await this.createKoalaSection();\n            case 'spotify':\n                return this.createSpotifySection();\n            case 'cardmatch':\n                return gameManager.createCardMatch();\n            default:\n                return this.createDefaultSection();\n        }\n    }\n\n    async createAffirmationsSection() {\n        const container = document.createElement('div');\n        container.className = 'container';\n        \n        // Load existing affirmations\n        const affirmations = await this.loadData('affirmations');\n        \n        container.innerHTML = `\n            <div class=\"row justify-content-center\">\n                <div class=\"col-lg-8\">\n                    <div class=\"section-card card p-4\">\n                        <h2 class=\"text-center mb-4\"><i class=\"fas fa-heart\"></i> Love Affirmations</h2>\n                        \n                        <form class=\"section-form mb-4\" data-section=\"affirmations\">\n                            <div class=\"mb-3\">\n                                <label for=\"affirmation-text\" class=\"form-label\">Share a love note or affirmation:</label>\n                                <textarea class=\"form-control\" id=\"affirmation-text\" name=\"text\" rows=\"3\" \n                                         placeholder=\"Write something sweet...\" required></textarea>\n                            </div>\n                            <button type=\"submit\" class=\"btn btn-primary\">\n                                <i class=\"fas fa-heart\"></i> Share Love\n                            </button>\n                        </form>\n                        \n                        <div id=\"affirmations-list\">\n                            ${this.renderAffirmations(affirmations)}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n        \n        return container;\n    }\n\n    renderAffirmations(affirmations) {\n        if (!affirmations || affirmations.length === 0) {\n            return '<p class=\"text-muted text-center\">No affirmations yet. Share the first one!</p>';\n        }\n        \n        return affirmations.map(affirmation => `\n            <div class=\"card mb-3 affirmation-card\" data-id=\"${affirmation.id}\">\n                <div class=\"card-body\">\n                    <p class=\"card-text affirmation-text\">${this.escapeHtml(affirmation.text)}</p>\n                    <div class=\"d-flex justify-content-between align-items-center\">\n                        <small class=\"text-muted\">${new Date(affirmation.date).toLocaleDateString()}</small>\n                        <div class=\"btn-group\">\n                            <button class=\"btn btn-sm btn-outline-danger like-btn\" \n                                    data-section=\"affirmations\" data-id=\"${affirmation.id}\">\n                                <i class=\"fas fa-heart\"></i> ${affirmation.likes || 0}\n                            </button>\n                            <button class=\"btn btn-sm btn-outline-primary edit-btn\" \n                                    data-section=\"affirmations\" data-id=\"${affirmation.id}\">\n                                <i class=\"fas fa-edit\"></i>\n                            </button>\n                            <button class=\"btn btn-sm btn-outline-danger delete-btn\" \n                                    data-section=\"affirmations\" data-id=\"${affirmation.id}\">\n                                <i class=\"fas fa-trash\"></i>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `).join('');\n    }\n\n    async createDateIdeasSection() {\n        const container = document.createElement('div');\n        container.className = 'container';\n        \n        const dateIdeas = await this.loadData('date_ideas');\n        \n        container.innerHTML = `\n            <div class=\"row justify-content-center\">\n                <div class=\"col-lg-8\">\n                    <div class=\"section-card card p-4\">\n                        <h2 class=\"text-center mb-4\"><i class=\"fas fa-calendar-heart\"></i> Date Ideas</h2>\n                        \n                        <form class=\"section-form mb-4\" data-section=\"date_ideas\">\n                            <div class=\"row\">\n                                <div class=\"col-md-6\">\n                                    <div class=\"mb-3\">\n                                        <label for=\"idea-title\" class=\"form-label\">Date Title:</label>\n                                        <input type=\"text\" class=\"form-control\" id=\"idea-title\" name=\"title\" \n                                               placeholder=\"Romantic dinner...\" required>\n                                    </div>\n                                </div>\n                                <div class=\"col-md-6\">\n                                    <div class=\"mb-3\">\n                                        <label for=\"idea-category\" class=\"form-label\">Category:</label>\n                                        <select class=\"form-control\" id=\"idea-category\" name=\"category\">\n                                            <option value=\"romantic\">Romantic</option>\n                                            <option value=\"adventure\">Adventure</option>\n                                            <option value=\"cozy\">Cozy</option>\n                                            <option value=\"creative\">Creative</option>\n                                        </select>\n                                    </div>\n                                </div>\n                            </div>\n                            <div class=\"mb-3\">\n                                <label for=\"idea-description\" class=\"form-label\">Description:</label>\n                                <textarea class=\"form-control\" id=\"idea-description\" name=\"description\" rows=\"3\" \n                                         placeholder=\"Describe the perfect date...\" required></textarea>\n                            </div>\n                            <button type=\"submit\" class=\"btn btn-primary\">\n                                <i class=\"fas fa-plus\"></i> Add Date Idea\n                            </button>\n                        </form>\n                        \n                        <div id=\"date-ideas-list\">\n                            ${this.renderDateIdeas(dateIdeas)}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n        \n        return container;\n    }\n\n    renderDateIdeas(dateIdeas) {\n        if (!dateIdeas || dateIdeas.length === 0) {\n            return '<p class=\"text-muted text-center\">No date ideas yet. Add the first one!</p>';\n        }\n        \n        return dateIdeas.map(idea => `\n            <div class=\"card mb-3 date_idea-card\" data-id=\"${idea.id}\">\n                <div class=\"card-body\">\n                    <div class=\"d-flex justify-content-between align-items-start\">\n                        <h5 class=\"card-title date_idea-text\">${this.escapeHtml(idea.title)}</h5>\n                        <span class=\"badge bg-primary\">${idea.category}</span>\n                    </div>\n                    <p class=\"card-text date_idea-description\">${this.escapeHtml(idea.description)}</p>\n                    <div class=\"d-flex justify-content-between align-items-center\">\n                        <small class=\"text-muted\">${new Date(idea.date).toLocaleDateString()}</small>\n                        <div class=\"btn-group\">\n                            <button class=\"btn btn-sm btn-outline-primary edit-btn\" \n                                    data-section=\"date_ideas\" data-id=\"${idea.id}\">\n                                <i class=\"fas fa-edit\"></i>\n                            </button>\n                            <button class=\"btn btn-sm btn-outline-danger delete-btn\" \n                                    data-section=\"date_ideas\" data-id=\"${idea.id}\">\n                                <i class=\"fas fa-trash\"></i>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `).join('');\n    }\n\n    async createDiarySection() {\n        const container = document.createElement('div');\n        container.className = 'container';\n        \n        const diaryEntries = await this.loadData('diary_entries');\n        \n        container.innerHTML = `\n            <div class=\"row justify-content-center\">\n                <div class=\"col-lg-8\">\n                    <div class=\"section-card card p-4\">\n                        <h2 class=\"text-center mb-4\"><i class=\"fas fa-book\"></i> Love Diary</h2>\n                        \n                        <form class=\"section-form mb-4\" data-section=\"diary_entries\">\n                            <div class=\"row\">\n                                <div class=\"col-md-8\">\n                                    <div class=\"mb-3\">\n                                        <label for=\"diary-title\" class=\"form-label\">Entry Title:</label>\n                                        <input type=\"text\" class=\"form-control\" id=\"diary-title\" name=\"title\" \n                                               placeholder=\"Today's memory...\" required>\n                                    </div>\n                                </div>\n                                <div class=\"col-md-4\">\n                                    <div class=\"mb-3\">\n                                        <label for=\"diary-mood\" class=\"form-label\">Mood:</label>\n                                        <select class=\"form-control\" id=\"diary-mood\" name=\"mood\">\n                                            <option value=\"happy\">😊 Happy</option>\n                                            <option value=\"love\">💕 In Love</option>\n                                            <option value=\"excited\">🎉 Excited</option>\n                                            <option value=\"peaceful\">😌 Peaceful</option>\n                                            <option value=\"grateful\">🙏 Grateful</option>\n                                        </select>\n                                    </div>\n                                </div>\n                            </div>\n                            <div class=\"mb-3\">\n                                <label for=\"diary-content\" class=\"form-label\">Share your thoughts:</label>\n                                <textarea class=\"form-control\" id=\"diary-content\" name=\"content\" rows=\"5\" \n                                         placeholder=\"Write about your day, feelings, or memories...\" required></textarea>\n                            </div>\n                            <button type=\"submit\" class=\"btn btn-primary\">\n                                <i class=\"fas fa-pen\"></i> Save Memory\n                            </button>\n                        </form>\n                        \n                        <div id=\"diary-entries-list\">\n                            ${this.renderDiaryEntries(diaryEntries)}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n        \n        return container;\n    }\n\n    renderDiaryEntries(entries) {\n        if (!entries || entries.length === 0) {\n            return '<p class=\"text-muted text-center\">No diary entries yet. Write your first memory!</p>';\n        }\n        \n        const moodEmojis = {\n            happy: '😊',\n            love: '💕',\n            excited: '🎉',\n            peaceful: '😌',\n            grateful: '🙏'\n        };\n        \n        return entries.slice().reverse().map(entry => `\n            <div class=\"card mb-3 diary_entry-card\" data-id=\"${entry.id}\">\n                <div class=\"card-body\">\n                    <div class=\"d-flex justify-content-between align-items-start mb-2\">\n                        <h5 class=\"card-title diary_entry-text\">${this.escapeHtml(entry.title)}</h5>\n                        <span class=\"badge bg-secondary\">${moodEmojis[entry.mood] || '😊'}</span>\n                    </div>\n                    <p class=\"card-text diary_entry-content\">${this.escapeHtml(entry.content)}</p>\n                    <div class=\"d-flex justify-content-between align-items-center\">\n                        <small class=\"text-muted\">${new Date(entry.date).toLocaleDateString()}</small>\n                        <div class=\"btn-group\">\n                            <button class=\"btn btn-sm btn-outline-primary edit-btn\" \n                                    data-section=\"diary_entries\" data-id=\"${entry.id}\">\n                                <i class=\"fas fa-edit\"></i>\n                            </button>\n                            <button class=\"btn btn-sm btn-outline-danger delete-btn\" \n                                    data-section=\"diary_entries\" data-id=\"${entry.id}\">\n                                <i class=\"fas fa-trash\"></i>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `).join('');\n    }\n\n    createHeartGameSection() {\n        const container = document.createElement('div');\n        container.className = 'container';\n        \n        container.innerHTML = `\n            <div class=\"row justify-content-center\">\n                <div class=\"col-lg-8\">\n                    <div class=\"section-card card p-4\">\n                        <h2 class=\"text-center mb-4\"><i class=\"fas fa-gamepad\"></i> Heart Collection Game</h2>\n                        \n                        <div class=\"text-center mb-4\">\n                            <div class=\"mb-3\">\n                                <h4>Score: <span id=\"heart-score\">0</span></h4>\n                                <button class=\"btn btn-primary\" onclick=\"app.startHeartGame()\">\n                                    <i class=\"fas fa-play\"></i> Start Game\n                                </button>\n                                <button class=\"btn btn-outline-secondary ms-2\" onclick=\"app.stopHeartGame()\">\n                                    <i class=\"fas fa-stop\"></i> Stop\n                                </button>\n                            </div>\n                        </div>\n                        \n                        <div class=\"heart-game-area\" id=\"heart-game-area\">\n                            <div class=\"text-center pt-5\">\n                                <i class=\"fas fa-heart\" style=\"font-size: 3rem; color: #ccc;\"></i>\n                                <p class=\"mt-3 text-muted\">Click \"Start Game\" to begin collecting hearts!</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n        \n        return container;\n    }\n\n    startHeartGame() {\n        const gameArea = document.getElementById('heart-game-area');\n        const scoreElement = document.getElementById('heart-score');\n        \n        if (!gameArea || !scoreElement) return;\n        \n        // Clear game area\n        gameArea.innerHTML = '';\n        \n        // Initialize game state\n        this.heartGameState = {\n            score: 0,\n            active: true,\n            interval: null\n        };\n        \n        scoreElement.textContent = '0';\n        \n        // Start spawning hearts\n        this.heartGameState.interval = setInterval(() => {\n            if (this.heartGameState.active) {\n                this.spawnHeart();\n            }\n        }, 1500);\n        \n        // Stop game after 30 seconds\n        setTimeout(() => {\n            this.stopHeartGame();\n        }, 30000);\n    }\n\n    spawnHeart() {\n        const gameArea = document.getElementById('heart-game-area');\n        if (!gameArea || !this.heartGameState.active) return;\n        \n        const heart = document.createElement('div');\n        heart.className = 'heart floating';\n        heart.innerHTML = '💖';\n        heart.style.left = Math.random() * (gameArea.offsetWidth - 50) + 'px';\n        heart.style.top = Math.random() * (gameArea.offsetHeight - 50) + 'px';\n        \n        heart.addEventListener('click', () => {\n            this.collectHeart(heart);\n        });\n        \n        gameArea.appendChild(heart);\n        \n        // Remove heart after 3 seconds if not collected\n        setTimeout(() => {\n            if (heart.parentNode) {\n                heart.parentNode.removeChild(heart);\n            }\n        }, 3000);\n    }\n\n    collectHeart(heartElement) {\n        this.heartGameState.score++;\n        document.getElementById('heart-score').textContent = this.heartGameState.score;\n        \n        // Animate heart collection\n        if (window.animationSystem) {\n            window.animationSystem.animateHeartCollection(heartElement);\n        }\n    }\n\n    stopHeartGame() {\n        if (this.heartGameState) {\n            this.heartGameState.active = false;\n            if (this.heartGameState.interval) {\n                clearInterval(this.heartGameState.interval);\n            }\n            \n            // Save score\n            this.saveHeartGameScore(this.heartGameState.score);\n            \n            // Show final score\n            const gameArea = document.getElementById('heart-game-area');\n            if (gameArea) {\n                gameArea.innerHTML = `\n                    <div class=\"text-center pt-5\">\n                        <i class=\"fas fa-trophy\" style=\"font-size: 3rem; color: gold;\"></i>\n                        <h3 class=\"mt-3\">Game Over!</h3>\n                        <p>Final Score: ${this.heartGameState.score}</p>\n                        <button class=\"btn btn-primary\" onclick=\"app.startHeartGame()\">Play Again</button>\n                    </div>\n                `;\n            }\n        }\n    }\n\n    async saveHeartGameScore(score) {\n        try {\n            await this.saveData('heart_game_score', { score });\n        } catch (error) {\n            console.error('Error saving heart game score:', error);\n        }\n    }\n\n    async createKoalaSection() {\n        const container = document.createElement('div');\n        container.className = 'container';\n        \n        const koalaStats = await this.loadData('koala_stats');\n        const defaultStats = { happiness: 50, hunger: 50, energy: 50 };\n        const stats = { ...defaultStats, ...koalaStats };\n        \n        container.innerHTML = `\n            <div class=\"row justify-content-center\">\n                <div class=\"col-lg-8\">\n                    <div class=\"section-card card p-4\">\n                        <h2 class=\"text-center mb-4\"><i class=\"fas fa-paw\"></i> Koala Care</h2>\n                        \n                        <div class=\"text-center mb-4\">\n                            <div style=\"font-size: 6rem;\">🐨</div>\n                            <h4>Meet your virtual koala!</h4>\n                        </div>\n                        \n                        <div class=\"row mb-4\">\n                            <div class=\"col-md-4\">\n                                <div class=\"text-center\">\n                                    <i class=\"fas fa-smile\" style=\"font-size: 2rem; color: #ffd700;\"></i>\n                                    <h6>Happiness</h6>\n                                    <div class=\"progress\">\n                                        <div class=\"progress-bar bg-warning\" style=\"width: ${stats.happiness}%\"></div>\n                                    </div>\n                                    <small>${stats.happiness}/100</small>\n                                </div>\n                            </div>\n                            <div class=\"col-md-4\">\n                                <div class=\"text-center\">\n                                    <i class=\"fas fa-drumstick-bite\" style=\"font-size: 2rem; color: #28a745;\"></i>\n                                    <h6>Hunger</h6>\n                                    <div class=\"progress\">\n                                        <div class=\"progress-bar bg-success\" style=\"width: ${stats.hunger}%\"></div>\n                                    </div>\n                                    <small>${stats.hunger}/100</small>\n                                </div>\n                            </div>\n                            <div class=\"col-md-4\">\n                                <div class=\"text-center\">\n                                    <i class=\"fas fa-bolt\" style=\"font-size: 2rem; color: #007bff;\"></i>\n                                    <h6>Energy</h6>\n                                    <div class=\"progress\">\n                                        <div class=\"progress-bar bg-info\" style=\"width: ${stats.energy}%\"></div>\n                                    </div>\n                                    <small>${stats.energy}/100</small>\n                                </div>\n                            </div>\n                        </div>\n                        \n                        <div class=\"text-center\">\n                            <button class=\"btn btn-success me-2\" onclick=\"app.feedKoala()\">\n                                <i class=\"fas fa-leaf\"></i> Feed\n                            </button>\n                            <button class=\"btn btn-primary me-2\" onclick=\"app.playWithKoala()\">\n                                <i class=\"fas fa-gamepad\"></i> Play\n                            </button>\n                            <button class=\"btn btn-info\" onclick=\"app.restKoala()\">\n                                <i class=\"fas fa-bed\"></i> Rest\n                            </button>\n                        </div>\n                        \n                        <div id=\"koala-message\" class=\"mt-3 text-center\"></div>\n                    </div>\n                </div>\n            </div>\n        `;\n        \n        return container;\n    }\n\n    async feedKoala() {\n        await this.updateKoalaStat('hunger', 20);\n        this.showKoalaMessage('🍃 Yummy eucalyptus leaves! Your koala is happier!');\n    }\n\n    async playWithKoala() {\n        await this.updateKoalaStat('happiness', 15);\n        await this.updateKoalaStat('energy', -10);\n        this.showKoalaMessage('🎮 Your koala had fun playing but is a bit tired now!');\n    }\n\n    async restKoala() {\n        await this.updateKoalaStat('energy', 25);\n        this.showKoalaMessage('😴 Your koala had a nice nap and feels refreshed!');\n    }\n\n    async updateKoalaStat(stat, change) {\n        try {\n            const currentStats = await this.loadData('koala_stats') || { happiness: 50, hunger: 50, energy: 50 };\n            currentStats[stat] = Math.max(0, Math.min(100, currentStats[stat] + change));\n            \n            await this.saveData('koala_stats', currentStats);\n            \n            // Update UI\n            this.showSection('koala');\n        } catch (error) {\n            console.error('Error updating koala stats:', error);\n        }\n    }\n\n    showKoalaMessage(message) {\n        const messageDiv = document.getElementById('koala-message');\n        if (messageDiv) {\n            messageDiv.innerHTML = `<div class=\"alert alert-info\">${message}</div>`;\n        }\n    }\n\n    createSpotifySection() {\n        const container = document.createElement('div');\n        container.className = 'container';\n        \n        container.innerHTML = `\n            <div class=\"row justify-content-center\">\n                <div class=\"col-lg-8\">\n                    <div class=\"section-card card p-4\">\n                        <h2 class=\"text-center mb-4\"><i class=\"fab fa-spotify\"></i> Our Love Playlist</h2>\n                        \n                        <div class=\"text-center mb-4\">\n                            <p class=\"lead\">Listen to our special songs together 💕</p>\n                        </div>\n                        \n                        <div class=\"spotify-embed\">\n                            <iframe data-testid=\"embed-iframe\" style=\"border-radius:12px\" \n                                    src=\"https://open.spotify.com/embed/playlist/1iPA0mTP93BTOwzcz006UV?utm_source=generator\" \n                                    width=\"100%\" height=\"352\" frameBorder=\"0\" allowfullscreen=\"\" \n                                    allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\" \n                                    loading=\"lazy\"></iframe>\n                        </div>\n                        \n                        <div class=\"text-center mt-4\">\n                            <p class=\"text-muted\">\n                                <i class=\"fas fa-headphones\"></i> \n                                Enjoy our curated playlist of love songs!\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n        \n        return container;\n    }\n\n    createDefaultSection() {\n        const container = document.createElement('div');\n        container.className = 'container';\n        \n        container.innerHTML = `\n            <div class=\"row justify-content-center\">\n                <div class=\"col-lg-8\">\n                    <div class=\"section-card card p-4 text-center\">\n                        <h2><i class=\"fas fa-seedling\"></i> Welcome to Your Love Garden</h2>\n                        <p class=\"lead\">Choose a section from the navigation to start exploring!</p>\n                        <div class=\"row mt-4\">\n                            <div class=\"col-md-6 mb-3\">\n                                <div class=\"card\">\n                                    <div class=\"card-body\">\n                                        <i class=\"fas fa-heart fa-2x mb-2\"></i>\n                                        <h5>Affirmations</h5>\n                                        <p>Share love notes and affirmations</p>\n                                    </div>\n                                </div>\n                            </div>\n                            <div class=\"col-md-6 mb-3\">\n                                <div class=\"card\">\n                                    <div class=\"card-body\">\n                                        <i class=\"fas fa-calendar-heart fa-2x mb-2\"></i>\n                                        <h5>Date Ideas</h5>\n                                        <p>Plan romantic adventures together</p>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n        \n        return container;\n    }\n\n    async handleSectionForm(form) {\n        const section = form.dataset.section;\n        const formData = new FormData(form);\n        const data = Object.fromEntries(formData.entries());\n        \n        try {\n            await this.saveData(section, data);\n            form.reset();\n            this.showNotification('Saved successfully!', 'success');\n            \n            // Refresh the section\n            setTimeout(() => {\n                this.showSection(this.currentSection);\n            }, 1000);\n        } catch (error) {\n            console.error('Error saving data:', error);\n            this.showNotification('Error saving data', 'error');\n        }\n    }\n\n    async editItem(section, id) {\n        try {\n            const card = document.querySelector(`.${section.slice(0, -1)}-card[data-id=\"${id}\"]`);\n            \n            if (section === 'affirmations') {\n                const textElement = card.querySelector(`.${section.slice(0, -1)}-text`);\n                const currentText = textElement.textContent;\n                \n                const newText = prompt('Edit your affirmation:', currentText);\n                if (newText && newText !== currentText) {\n                    const response = await fetch(`/api/edit/${section}/${id}`, {\n                        method: 'PUT',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify({ text: newText })\n                    });\n                    \n                    if (response.ok) {\n                        await this.showSection(section);\n                        this.showNotification('Updated successfully!', 'success');\n                    }\n                }\n            } else if (section === 'date_ideas') {\n                const titleElement = card.querySelector('.date_idea-text');\n                const descriptionElement = card.querySelector('.date_idea-description');\n                const currentTitle = titleElement.textContent;\n                const currentDescription = descriptionElement.textContent;\n                \n                const newTitle = prompt('Edit title:', currentTitle);\n                if (newTitle && newTitle !== currentTitle) {\n                    const newDescription = prompt('Edit description:', currentDescription);\n                    if (newDescription !== null) {\n                        const response = await fetch(`/api/edit/${section}/${id}`, {\n                            method: 'PUT',\n                            headers: {\n                                'Content-Type': 'application/json'\n                            },\n                            body: JSON.stringify({ \n                                title: newTitle, \n                                description: newDescription || currentDescription \n                            })\n                        });\n                        \n                        if (response.ok) {\n                            await this.showSection(section);\n                            this.showNotification('Updated successfully!', 'success');\n                        }\n                    }\n                }\n            } else if (section === 'diary_entries') {\n                const titleElement = card.querySelector('.diary_entry-text');\n                const contentElement = card.querySelector('.diary_entry-content');\n                const currentTitle = titleElement.textContent;\n                const currentContent = contentElement.textContent;\n                \n                const newTitle = prompt('Edit title:', currentTitle);\n                if (newTitle && newTitle !== currentTitle) {\n                    const newContent = prompt('Edit content:', currentContent);\n                    if (newContent !== null) {\n                        const response = await fetch(`/api/edit/${section}/${id}`, {\n                            method: 'PUT',\n                            headers: {\n                                'Content-Type': 'application/json'\n                            },\n                            body: JSON.stringify({ \n                                title: newTitle, \n                                content: newContent || currentContent \n                            })\n                        });\n                        \n                        if (response.ok) {\n                            await this.showSection(section);\n                            this.showNotification('Updated successfully!', 'success');\n                        }\n                    }\n                }\n            }\n        } catch (error) {\n            console.error('Error editing item:', error);\n            this.showNotification('Error editing item', 'error');\n        }\n    }\n\n    async deleteItem(section, id) {\n        if (confirm('Are you sure you want to delete this item?')) {\n            try {\n                const response = await fetch(`/api/delete/${section}/${id}`, {\n                    method: 'DELETE'\n                });\n                \n                if (response.ok) {\n                    await this.showSection(section);\n                    this.showNotification('Deleted successfully!', 'success');\n                }\n            } catch (error) {\n                console.error('Error deleting item:', error);\n                this.showNotification('Error deleting item', 'error');\n            }\n        }\n    }\n\n    async likeItem(section, itemId) {\n        try {\n            const response = await fetch(`/api/like/${section}/${itemId}`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                }\n            });\n            \n            if (response.ok) {\n                const result = await response.json();\n                if (result.success) {\n                    // Update the like count in UI\n                    const likeBtn = document.querySelector(`[data-section=\"${section}\"][data-id=\"${itemId}\"]`);\n                    if (likeBtn) {\n                        likeBtn.innerHTML = `<i class=\"fas fa-heart\"></i> ${result.likes}`;\n                    }\n                    this.showNotification('Liked!', 'success');\n                }\n            }\n        } catch (error) {\n            console.error('Error liking item:', error);\n            this.showNotification('Error liking item', 'error');\n        }\n    }\n\n    async loadData(section) {\n        try {\n            const response = await fetch(`/api/data/${section}`);\n            if (response.ok) {\n                return await response.json();\n            }\n        } catch (error) {\n            console.error('Error loading data:', error);\n        }\n        return [];\n    }\n\n    async saveData(section, data) {\n        const response = await fetch(`/api/data/${section}`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(data)\n        });\n        \n        if (!response.ok) {\n            throw new Error('Failed to save data');\n        }\n        \n        return await response.json();\n    }\n\n    showNotification(message, type = 'info') {\n        const toast = document.getElementById('notification-toast');\n        const toastBody = toast.querySelector('.toast-body');\n        \n        if (toast && toastBody) {\n            toastBody.textContent = message;\n            toast.className = `toast ${type === 'error' ? 'bg-danger text-white' : type === 'success' ? 'bg-success text-white' : ''}`;\n            \n            const bsToast = new bootstrap.Toast(toast);\n            bsToast.show();\n        }\n    }\n\n    escapeHtml(text) {\n        const div = document.createElement('div');\n        div.textContent = text;\n        return div.innerHTML;\n    }\n\n    checkAuthenticationStatus() {\n        // This would normally check session status\n        // For now, assume not authenticated\n        this.authenticated = false;\n    }\n}\n\n// Initialize the app when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.app = new EnchantedLoveGardenApp();\n    console.log('Enchanted Love Garden App initialized');\n});\n","size_bytes":42519},"static/js/games.js":{"content":"class GameManager {\n    constructor() {\n        this.currentGame = null;\n        this.gameData = {\n            cardmatch: null\n        };\n    }\n\n    // Card Matching Game\n    createCardMatch() {\n        const container = document.createElement('div');\n        container.innerHTML = `\n            <div class=\"text-center mb-4\">\n                <h3><i class=\"fas fa-heart\"></i> Love Memory Game</h3>\n                <p>Match the pairs of love symbols!</p>\n                <div class=\"mb-3\">\n                    <button class=\"btn btn-primary me-2\" onclick=\"gameManager.startCardMatch()\">New Game</button>\n                    <button class=\"btn btn-outline-primary\" onclick=\"gameManager.resetCardMatch()\">Reset</button>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-6\">\n                        <small>Moves: <span id=\"card-moves\">0</span></small>\n                    </div>\n                    <div class=\"col-6\">\n                        <small>Time: <span id=\"card-timer\">00:00</span></small>\n                    </div>\n                </div>\n            </div>\n            <div class=\"game-board card-match-board\" id=\"card-match-board\"></div>\n            <div id=\"card-match-message\" class=\"mt-3 text-center\"></div>\n        `;\n        \n        this.currentGame = 'cardmatch';\n        this.startCardMatch();\n        return container;\n    }\n\n    startCardMatch() {\n        const board = document.getElementById('card-match-board');\n        if (!board) return;\n        \n        const symbols = ['💕', '💖', '💝', '🌹', '🦋', '🌸', '💐', '🎀'];\n        const cards = [...symbols, ...symbols].sort(() => Math.random() - 0.5);\n        \n        board.innerHTML = '';\n        board.style.cssText = `\n            display: grid;\n            grid-template-columns: repeat(4, 1fr);\n            gap: 10px;\n            max-width: 400px;\n            margin: 0 auto;\n        `;\n        \n        this.gameData.cardmatch = {\n            cards: cards,\n            flipped: [],\n            matched: [],\n            moves: 0,\n            startTime: Date.now(),\n            gameOver: false\n        };\n        \n        cards.forEach((symbol, index) => {\n            const card = document.createElement('div');\n            card.className = 'card-match-card';\n            card.dataset.index = index;\n            card.style.cssText = `\n                aspect-ratio: 1;\n                background: linear-gradient(135deg, var(--primary-color), var(--accent-color));\n                border-radius: 15px;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                font-size: 2rem;\n                cursor: pointer;\n                transition: all 0.3s ease;\n                box-shadow: 0 4px 15px rgba(0,0,0,0.1);\n                position: relative;\n                overflow: hidden;\n            `;\n            \n            const cardBack = document.createElement('div');\n            cardBack.className = 'card-back';\n            cardBack.style.cssText = `\n                position: absolute;\n                top: 0;\n                left: 0;\n                right: 0;\n                bottom: 0;\n                background: linear-gradient(45deg, var(--primary-color), var(--secondary-color));\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                font-size: 1.5rem;\n                transition: transform 0.3s ease;\n                backface-visibility: hidden;\n            `;\n            cardBack.textContent = '💗';\n            \n            const cardFront = document.createElement('div');\n            cardFront.className = 'card-front';\n            cardFront.style.cssText = `\n                position: absolute;\n                top: 0;\n                left: 0;\n                right: 0;\n                bottom: 0;\n                background: linear-gradient(45deg, #ffffff, #f8f9fa);\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                font-size: 2rem;\n                transition: transform 0.3s ease;\n                transform: rotateY(180deg);\n                backface-visibility: hidden;\n            `;\n            cardFront.textContent = symbol;\n            \n            card.appendChild(cardBack);\n            card.appendChild(cardFront);\n            card.addEventListener('click', () => this.flipCard(index));\n            \n            board.appendChild(card);\n        });\n        \n        document.getElementById('card-moves').textContent = '0';\n        document.getElementById('card-timer').textContent = '00:00';\n        document.getElementById('card-match-message').innerHTML = '';\n        \n        this.startCardTimer();\n    }\n\n    flipCard(index) {\n        const game = this.gameData.cardmatch;\n        if (game.gameOver || game.flipped.includes(index) || game.matched.includes(index)) return;\n        if (game.flipped.length >= 2) return;\n        \n        const card = document.querySelector(`[data-index=\"${index}\"]`);\n        const cardBack = card.querySelector('.card-back');\n        const cardFront = card.querySelector('.card-front');\n        \n        // Flip animation\n        cardBack.style.transform = 'rotateY(-180deg)';\n        cardFront.style.transform = 'rotateY(0deg)';\n        \n        game.flipped.push(index);\n        \n        if (game.flipped.length === 2) {\n            game.moves++;\n            document.getElementById('card-moves').textContent = game.moves;\n            \n            setTimeout(() => this.checkCardMatch(), 800);\n        }\n    }\n\n    checkCardMatch() {\n        const game = this.gameData.cardmatch;\n        const [first, second] = game.flipped;\n        \n        if (game.cards[first] === game.cards[second]) {\n            // Match found\n            game.matched.push(first, second);\n            game.flipped = [];\n            \n            // Add match animation\n            const card1 = document.querySelector(`[data-index=\"${first}\"]`);\n            const card2 = document.querySelector(`[data-index=\"${second}\"]`);\n            \n            [card1, card2].forEach(card => {\n                card.style.transform = 'scale(1.1)';\n                card.style.boxShadow = '0 0 20px var(--accent-color)';\n                setTimeout(() => {\n                    card.style.transform = 'scale(1)';\n                    card.style.opacity = '0.7';\n                }, 200);\n            });\n            \n            // Check if game is complete\n            if (game.matched.length === game.cards.length) {\n                this.completeCardMatch();\n            }\n        } else {\n            // No match, flip back\n            setTimeout(() => {\n                [first, second].forEach(index => {\n                    const card = document.querySelector(`[data-index=\"${index}\"]`);\n                    const cardBack = card.querySelector('.card-back');\n                    const cardFront = card.querySelector('.card-front');\n                    \n                    cardBack.style.transform = 'rotateY(0deg)';\n                    cardFront.style.transform = 'rotateY(180deg)';\n                });\n                \n                game.flipped = [];\n            }, 500);\n        }\n    }\n\n    completeCardMatch() {\n        const game = this.gameData.cardmatch;\n        game.gameOver = true;\n        clearInterval(this.cardTimerInterval);\n        \n        const elapsed = Math.floor((Date.now() - game.startTime) / 1000);\n        const minutes = Math.floor(elapsed / 60);\n        const seconds = elapsed % 60;\n        \n        document.getElementById('card-match-message').innerHTML = `\n            <div class=\"alert alert-success\">\n                <h5>🎉 Congratulations!</h5>\n                <p>Completed in ${game.moves} moves and ${minutes}:${seconds.toString().padStart(2, '0')}!</p>\n            </div>\n        `;\n        \n        this.saveGameScore('cardmatch', game.moves, elapsed);\n    }\n\n    resetCardMatch() {\n        if (this.cardTimerInterval) {\n            clearInterval(this.cardTimerInterval);\n        }\n        this.startCardMatch();\n    }\n\n    startCardTimer() {\n        const timer = document.getElementById('card-timer');\n        if (!timer) return;\n        \n        const updateTimer = () => {\n            if (this.currentGame === 'cardmatch' && this.gameData.cardmatch && !this.gameData.cardmatch.gameOver) {\n                const elapsed = Math.floor((Date.now() - this.gameData.cardmatch.startTime) / 1000);\n                const minutes = Math.floor(elapsed / 60).toString().padStart(2, '0');\n                const seconds = (elapsed % 60).toString().padStart(2, '0');\n                timer.textContent = `${minutes}:${seconds}`;\n            }\n        };\n        \n        updateTimer();\n        this.cardTimerInterval = setInterval(updateTimer, 1000);\n    }\n\n    async saveGameScore(gameType, score, time = 0) {\n        try {\n            const response = await fetch('/api/save-game-score', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    game_type: gameType,\n                    score: score,\n                    time_taken: time\n                })\n            });\n            \n            if (response.ok) {\n                console.log('Game score saved successfully');\n            }\n        } catch (error) {\n            console.error('Error saving game score:', error);\n        }\n    }\n}\n\n// Initialize game manager\nconst gameManager = new GameManager();","size_bytes":9608}}}